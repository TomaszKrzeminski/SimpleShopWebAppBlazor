@using Microsoft.AspNetCore.Components.Forms
@using SimpleShopWebApp.Models
@using SimpleShopWebApp.Data
@inject NavigationManager Navigation
@*@implements IDisposable*@
@using Microsoft.EntityFrameworkCore.Design
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext>  factory

<style>
    .hide {
        position: fixed;
        left: -200px;
        top: -200px;
    }
</style>

<h3>RemoveProduct</h3>

<h3>MainPage   @DateTime.Now    </h3>

<input class="form-control" @bind="FormSubmitMessage" />






@foreach (RemoveProductData item in RemoveList)
{




    <div>
        <EditForm Model="item" OnValidSubmit="()=>HandleValidSubmit(item)">

            <td><label>@item.ProductId</label></td>
            <td><label>@item.ProductName</label></td>
            <td><label>@item.ProductStartTime</label></td>
            <td><label>@item.ProductEndTime</label></td>
            <td>
                @*<button type="submit" class="btn btn-danger" >Usuń</button>*@
                <input type="submit" class="btn btn-danger" value="Usuń" />

            </td>
        </EditForm>
        <input class="btn btn-danger" value="Update" @onclick="UpdateView" />
    </div>






}




@*</table>*@















@code {

    public string FormSubmitMessage { get; set; } = "Dane formularza nie zostały wysłane";
    public Repository repository { get; set; }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dane w formularzu są błędne";

    public bool DataLogin = false;
    public IEnumerable<RemoveProductData> RemoveList { get; set; } = new List<RemoveProductData>();



    [Parameter]
    public RemoveProductData removeProduct { get; set; }

    public RemoveProductViewModel Model { get; set; } = new RemoveProductViewModel();



    protected override async Task OnInitializedAsync()
    {

        ApplicationDbContext context = factory.CreateDbContext();
        repository = new Repository(context);
        List<RemoveProductData>
            list = await repository.GetProductsRemoveData();

        RemoveList = list;

    }




    public async Task HandleValidSubmit(RemoveProductData data)
    {


        if (DataLogin)
        {
            return;
        }



        try
        {


            @using (var repo = new Repository(factory.CreateDbContext()))
            {
                DataLogin = true;
                FormSubmitMessage = "Wysyłam formularz";

                await repository.RemoveProduct(data);

            }


        }
        catch (Exception ex)
        {

        }
        finally
        {

            RemoveList = new List<RemoveProductData>();
            DataLogin = false;


        }


        await UpdateView();



    }



    public async Task UpdateView()
    {


        if(DataLogin)
        {
            return;
        }



        try
        {


            @using (var repo = new Repository(factory.CreateDbContext()))
            {

                FormSubmitMessage = "Odświerzam";
                ApplicationDbContext context = factory.CreateDbContext();
                repository = new Repository(context);
                RemoveList = await repository.GetProductsRemoveData();

            }


        }
        catch (Exception ex)
        {

        }
        finally
        {

           
            DataLogin = false;


        }   


    }

    

}