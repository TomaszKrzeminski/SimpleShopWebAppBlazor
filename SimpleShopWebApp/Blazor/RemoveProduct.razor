@using Microsoft.AspNetCore.Components.Forms
@using SimpleShopWebApp.Models
@using SimpleShopWebApp.Data
@inject NavigationManager Navigation
@*@implements IDisposable*@
@using Microsoft.EntityFrameworkCore.Design
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext>  factory

<style>
    .hide {
        position: fixed;
        left: -200px;
        top: -200px;
    }
</style>

<h3>RemoveProduct</h3>

<h3>MainPage   @DateTime.Now    </h3>

<input class="form-control" @bind="FormSubmitMessage" />



   
    

        @foreach (RemoveProductData item in RemoveList)
        {




<div>
    <EditForm Model="item" OnValidSubmit="()=>HandleValidSubmit(item)">

        <td><label>@item.ProductId</label></td>
        <td><label>@item.ProductName</label></td>
        <td><label>@item.ProductStartTime</label></td>
        <td><label>@item.ProductEndTime</label></td>
        <td>
            @*<button type="submit" class="btn btn-danger" >Usuń</button>*@
            <input type="submit" class="btn btn-danger" value="Usuń" />

        </td>
    </EditForm>
    <input class="btn btn-danger" value="Update" @onclick="UpdateView" />
</div>

            
        


       
         }


      
   
@*</table>*@















@code {

    public string FormSubmitMessage { get; set; } = "Dane formularza nie zostały wysłane";
    public Repository repository { get; set; }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dane w formularzu są błędne";

    
    public IEnumerable<RemoveProductData> RemoveList { get; set; } = new List<RemoveProductData>();



    [Parameter]
    public RemoveProductData removeProduct { get; set; }

    public RemoveProductViewModel Model { get; set; } = new RemoveProductViewModel();



    protected override async Task OnInitializedAsync()
    {

        ApplicationDbContext context = factory.CreateDbContext();
        repository = new Repository(context);
        List<RemoveProductData>
            list = await repository.GetProductsRemoveData();

        RemoveList = list;

    }




    public async void HandleValidSubmit(RemoveProductData data)
    {
        FormSubmitMessage = "Wysyłam formularz";
        ApplicationDbContext context = factory.CreateDbContext();
        repository = new Repository(context);

        await repository.RemoveProduct(data);

        await UpdateView();


    }



    public async Task UpdateView()
    {
        FormSubmitMessage = "Odświerzam";
        ApplicationDbContext context = factory.CreateDbContext();
        repository = new Repository(context);

        List<RemoveProductData>
           list = await repository.GetProductsRemoveData();

        RemoveList = list;


    }

    public void Dispose()
    {

        repository.Dispose();
    }


}