@using Microsoft.AspNetCore.Components.Forms
@using SimpleShopWebApp.Models
@using SimpleShopWebApp.Data
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore.Design
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext>  factory





<h3>AddProduct</h3>

<input class="form-control" @bind="FormSubmitMessage" />

<EditForm Model="@Product" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    <div class="form-group">
        <label></label>
        <InputText @bind-Value="Product.Product.ProductName"></InputText>
    </div>
    <div class="form-group">
        <label></label>
        <InputNumber @bind-Value="Product.Product.PriceHour"></InputNumber>
    </div>
    <div class="form-group">
        <label></label>
        <InputNumber @bind-Value="Product.Product.PricePerPerson"></InputNumber>
    </div>
    <div class="form-group">
        <label></label>
        <InputDateTime id="createdDate" class="form-control col-sm-8" @bind-Value="Product.Product.DateTimeStart"></InputDateTime>
    </div>
    <div class="form-group">
        <label></label>
        <InputDateTime id="createdDate" class="form-control col-sm-8" @bind-Value="Product.Product.DateTimeEnd"></InputDateTime>
    </div>
    <div class="col col-lg-4">
        <label>Dodaj instruktora</label>
        <select class="form-control" @bind="Product.Product.">
            <option disabled selected> </option>
            @foreach (var item in SortingTypes)
            {
                <option selected="@(item==SortType)">@item</option>
            }
        </select>
    </div>
    <div class="form-group">


        <button class="btn btn-danger" type="submit">Dodaj</button>
    </div>


</EditForm>





@code {


    private DateTime? selectedTime = DateTime.Now;
    public DateTime Min = new DateTime(1990, 1, 1, 8, 15, 0);
    public DateTime Max = new DateTime(2025, 1, 1, 19, 30, 45);



    public string FormSubmitMessage { get; set; } = "Dane formularza nie zostały wysłane";
    public Repository repository { get; set; }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dane w formularzu są błędne";

    public bool DataLogin = false;

    public AddProductViewModel Product { get; set; } = new AddProductViewModel();

    public async Task HandleValidSubmit()
    {


        if (DataLogin)
        {
            return;
        }


        try
        {
            DataLogin = true;
            FormSubmitMessage = "Dodano  " + Product.Product.ProductName + " z dnia " + Product.Product.DateTimeStart;


            using (var repo = new Repository(factory.CreateDbContext()))
            {

                await repo.AddProduct(Product.Product);

            }




        }
        catch (Exception ex)
        {

        }
        finally
        {
            Product = new AddProductViewModel();
            DataLogin = false;

        }









    }



    protected override async Task OnInitializedAsync()
    {

        ApplicationDbContext context = factory.CreateDbContext();
        repository = new Repository(context);
        

        // get instructors

    }




    public async Task Update()
    {

        //FormSubmitMessage = "Odświeżam";

    }




    //public void Dispose()
    //{
    //    FormSubmitMessage = "Usuwam";
    //    repository.Dispose();
    //}



    //public void Dispose()
    //{


    //    if(DataLogin)
    //    {
    //        return;
    //    }

    //    try
    //    {
    //        DataLogin = true;
    //        repository.Dispose();
    //    }
    //    catch(Exception ex)
    //    {

    //    }

    //    finally
    //    {
    //        DataLogin = false;
    //    }

    //}

}

