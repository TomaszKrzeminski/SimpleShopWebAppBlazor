@using Microsoft.AspNetCore.Components.Forms
@using SimpleShopWebApp.Models
@using SimpleShopWebApp.Data
@inject NavigationManager Navigation
@implements IDisposable
@using Microsoft.EntityFrameworkCore.Design
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext>  factory





<h3>AddProduct</h3>

<input class="form-control" @bind="FormSubmitMessage" />

<EditForm Model="Product" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    <div class="form-group">
        <label></label>
        <InputText @bind-Value="Product.Product.ProductName"></InputText>
    </div>
    <div class="form-group">
        <label></label>
        <InputNumber @bind-Value="Product.Product.PriceHour"></InputNumber>
    </div>
    <div class="form-group">
        <label></label>
        <InputNumber @bind-Value="Product.Product.PricePerPerson"></InputNumber>
    </div>
    <div class="form-group">

        <input class="btn btn-primary" type="submit" value="Dodaj"/>

        @*<button class="btn btn-danger" type="submit">Dodaj</button>*@
    </div>


</EditForm>





@code {


    public string FormSubmitMessage { get; set; } = "Dane formularza nie zostały wysłane";
    public Repository repository { get; set; }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Dane w formularzu są błędne";


    [Parameter]
    public AddProductViewModel Product { get; set; } = new AddProductViewModel();

    public async void HandleValidSubmit()
    {
        FormSubmitMessage = "Dodano  "+Product.Product.ProductName+ " z dnia "+Product.Product.DateTimeStart;
        repository = new Repository(factory.CreateDbContext());

        await repository.AddProduct(Product.Product);


    }

    public void Dispose()
    {

        repository.Dispose();
    }

}

